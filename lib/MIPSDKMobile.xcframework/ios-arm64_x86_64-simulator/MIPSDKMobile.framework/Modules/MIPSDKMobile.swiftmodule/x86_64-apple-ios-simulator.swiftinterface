// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MIPSDKMobile
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import MIPSDKMobile
import Swift
import _Concurrency
import _StringProcessing
@objc public enum XPSDKConnectionState : Swift.Int {
  case idle = 0
  case connecting = 1
  case connected = 2
  case loggingIn = 3
  case working = 4
  case disconnecting = 5
  case disconnected = 6
  case lostConnection = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum XPSDKPTZMotion : Swift.Int {
  case Up
  case Down
  case Left
  case Right
  case ZoomIn
  case ZoomOut
  case Home
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol XPMobileSDKConnectionDelegate {
  @objc optional func connectionDidLogIn(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectiondidFailLoginWithError(_ error: Foundation.NSError)
  @objc optional func connectionDidFailConnectWithError(_ error: Foundation.NSError)
  @objc optional func connectionWillDisconnect(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectionDidDisconnect(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectionDidConnect(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectionLostConnectivity(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectionRestoredConnectivity(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectionPopToRoot(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectionCodeError(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func connectionCodeRequired(_ connection: MIPSDKMobile.XPSDKConnection)
  @objc optional func wrongConnectionIdWithError(_ error: Foundation.NSError)
  @objc optional func connectionWentDownWithError(_ error: Foundation.NSError)
  @objc optional func connectionReachabilityChanged(_ notification: Foundation.Notification)
  @objc optional func didReceiveNotification(_ notification: Foundation.NSDictionary)
}
@_inheritsConvenienceInitializers @objc open class XPSDKConnection : ObjectiveC.NSObject {
  @objc public static var sharedConnection: MIPSDKMobile.XPSDKConnection
  @objc final public let delegates: Foundation.NSMutableSet
  @objc open var features: Foundation.NSDictionary? {
    get
  }
  @objc open var url: Foundation.URL?
  @objc open var urlEndPoint: Swift.String
  @objc open var isRaceConnection: Swift.Bool
  @objc open var state: MIPSDKMobile.XPSDKConnectionState
  @objc open var dhe: MIPSDKMobile.DHEncryption?
  @objc open var id: Swift.String?
  @objc open var reachability: MIPSDKMobile.Reachability?
  @objc open var serverInfo: MIPSDKMobile.XPSDKServerInfo?
  final public let raceConnections: Foundation.NSMutableSet
  @objc open var server: Swift.AnyObject?
  @objc open var changePasswordRelativePath: Swift.String?
  @objc public func setupWithURLString(_ urlString: Swift.String, uuid: Swift.String? = nil, serviceAlias: Swift.String? = nil)
  @objc public func setupWithServerInfo(_ serInfo: MIPSDKMobile.XPSDKServerInfo)
  @objc public func isUserAnalyticsFeatureEnabledOnServer() -> Swift.Bool
  @objc public func setupWithUsername(_ username: Swift.String, password: Swift.String, loginType: Swift.String? = nil, shouldSave: Swift.Bool)
  @objc open func setHeartbeatTimeout(newValue: Swift.Int)
  @objc public func addRaceConnection(_ raceConnection: MIPSDKMobile.XPSDKConnection?)
  public func addRequest(_ request: MIPSDKMobile.XPSDKRequest?)
  @objc public func addDelegate(_ delegate: MIPSDKMobile.XPMobileSDKConnectionDelegate?)
  @objc public func removeDelegate(_ delegate: MIPSDKMobile.XPMobileSDKConnectionDelegate?)
  @objc public func explicitSetOfConnectionState(_ state: Foundation.NSNumber)
  @objc public func updateNetworkIndicator()
  @objc public static func resetSharedConnection()
  public func sendCommand(name: Swift.String, parameters: [Swift.String : Swift.String]?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc override dynamic public init()
  @objc deinit
}
public typealias WithoutParametersBlock = () -> Swift.Void
public typealias SuccessResponse = (MIPSDKMobile.XPSDKResponse?) -> Swift.Void
public typealias SuccessBlock = (Swift.AnyObject?) -> Swift.Void
public typealias SuccessBlockBool = (Swift.Bool) -> Swift.Void
public typealias FailureBlock = (Foundation.NSError?) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers open class XPSDKLiveVideo : ObjectiveC.NSObject {
  @objc open var cameraId: MIPSDKMobile.XPSDKViewID?
  open var fps: Swift.Int?
  @objc open var videoProperties: Swift.Dictionary<Swift.String, Any>?
  @objc open var connection: MIPSDKMobile.XPSDKConnection?
  @objc open var videoFactory: MIPSDKMobile.XPSDKVideoFactory?
  @objc open var method: MIPSDKMobile.XPSDKVideoConnectionMethod
  @objc open var videoConnectionDelegate: MIPSDKMobile.XPSDKVideoConnectionDelegate?
  @objc convenience public init(connection: MIPSDKMobile.XPSDKConnection, videoConnectionDelegate: MIPSDKMobile.XPSDKVideoConnectionDelegate, videoProperties: Swift.Dictionary<Swift.String, Any>)
  @objc public func requestVideo() -> Foundation.NSError?
  @objc public func rescaleVideo(width: Swift.Int, height: Swift.Int) -> Swift.Bool
  @objc public func cropVideo(left: Swift.Int, top: Swift.Int, right: Swift.Int, bottom: Swift.Int) -> Swift.Bool
  @objc public func stopVideo()
  @objc override dynamic public init()
  @objc deinit
}
extension MIPSDKMobile.XPSDKConnection {
  public func requestStream(forCameraID cameraID: MIPSDKMobile.XPSDKViewID?, size: CoreFoundation.CGSize, method: MIPSDKMobile.XPSDKVideoConnectionMethod, signal: MIPSDKMobile.XPSDKVideoConnectionSignal, fps: Swift.Int, compressionLevel: Swift.Int, userInitiatedDownsampling: Swift.Bool, keyFramesOnly: Swift.Bool, resizeSupported: Swift.Bool, time: Foundation.NSDate?, upstreamImageQuality: Swift.Float?, closeConnectionOnError: Swift.String?, successHandler: @escaping (MIPSDKMobile.XPSDKResponse, MIPSDKMobile.XPSDKVideoConnection) -> Swift.Void, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  public func requestStream(forCameraID cameraID: MIPSDKMobile.XPSDKViewID?, streamType: Swift.String?, size: CoreFoundation.CGSize, method: MIPSDKMobile.XPSDKVideoConnectionMethod, signal: MIPSDKMobile.XPSDKVideoConnectionSignal, fps: Swift.Int, compressionLevel: Swift.Int, userInitiatedDownsampling: Swift.Bool, keyFramesOnly: Swift.Bool, resizeSupported: Swift.Bool, time: Foundation.NSDate?, timeRangeBegin: Foundation.NSNumber? = nil, timeRangeEnd: Foundation.NSNumber? = nil, upstreamImageQuality: Swift.Float?, closeConnectionOnError: Swift.String?, successHandler: @escaping (MIPSDKMobile.XPSDKResponse, MIPSDKMobile.XPSDKVideoConnection) -> Swift.Void, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  public func cancelRequestStream(request: MIPSDKMobile.XPSDKRequest)
  public func closeVideoConnection(videoConnection: MIPSDKMobile.XPSDKVideoConnection, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc dynamic public func purgeVideoConnections()
  @objc dynamic public func changeStream(forVideoID videoID: Swift.String, fps: Swift.Int, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func changeStream(forVideoID videoID: Swift.String, size: CoreFoundation.CGSize, sourceRect: CoreFoundation.CGRect, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func changeStream(forVideoID videoID: Swift.String, size: CoreFoundation.CGSize, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func changeStream(forVideoID videoID: Swift.String, sourceRect: CoreFoundation.CGRect, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func changeStream(forVideoID videoID: Swift.String, playSpeed: Swift.Float, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func previousSequence(forVideoID videoID: Swift.String, speed: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func nextSequence(forVideoID videoID: Swift.String, speed: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func previousFrame(forVideoID videoID: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func nextFrame(forVideoID videoID: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func seekToTimestamp(forVideoID videoID: Swift.String, timestamp: Foundation.NSNumber, seekType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func seekToTime(forVideoID videoID: Swift.String, time: Foundation.NSDate, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @available(*, deprecated, message: "Use requestAudio(forMicrophoneId:playbackControllerId:investigationId:audioEncoding:signalType:methodType:successHandler:failureHandler:)")
  public func requestAudio(forMicrophoneId micId: Swift.String, playbackControllerId: Swift.String?, audioEncoding: Swift.String, signalType: Swift.String, methodType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func requestAudio(forMicrophoneId micId: Swift.String, playbackControllerId: Swift.String?, investigationId: Swift.String?, audioEncoding: Swift.String, signalType: Swift.String, methodType: Swift.String, closeConnectionOnError: Swift.String? = nil, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func requestAudio(forItemIDs itemIds: Foundation.NSArray, playbackControllerId: Swift.String?, investigationId: Swift.String?, audioEncoding: Swift.String, signalType: Swift.String, methodType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func closeAudioStream(forAudioId audioId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func requestAudioStreamIn(forItemId itemId: Swift.String, audioEncoding: Swift.String, samplingRate: Swift.String, bitsPerSample: Swift.String, numberOfChannels: Swift.String, closeConnectionOnError: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  public func requestAudioPush(forItemId itemId: Swift.String, audioEncoding: Swift.String, samplingRate: Swift.String, bitsPerSample: Swift.String, numberOfChannels: Swift.String, closeConnectionOnError: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  public func requestAudioStream(commandName: Swift.String, itemId: Swift.String, audioEncoding: Swift.String, samplingRate: Swift.String, bitsPerSample: Swift.String, numberOfChannels: Swift.String, closeConnectionOnError: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
}
@objc @_hasMissingDesignatedInitializers @objcMembers open class XPSDKVideoFactory : ObjectiveC.NSObject {
  @objc open var connection: MIPSDKMobile.XPSDKConnection?
  @objc open var videoConnection: MIPSDKMobile.XPSDKVideoConnection?
  @objc open var compressionLevel: Swift.Int
  @objc open var fps: Swift.Int
  @objc open var videoConnectionDelegate: MIPSDKMobile.XPSDKVideoConnectionDelegate?
  @objc open var isVideoConnectionStarted: Swift.Bool
  @objc open var successfullyChangedStream: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class XPSDKResponse : Foundation.NSDictionary {
  @objc weak open var response: Foundation.NSDictionary? {
    get
  }
  open var isResponse: Swift.Bool {
    get
  }
  open var isProcessing: Swift.Bool {
    get
  }
  open var items: Foundation.NSDictionary? {
    get
  }
  @objc open var parameters: Foundation.NSDictionary? {
    get
  }
  @objc open var subItems: Foundation.NSArray? {
    get
  }
  open var sequences: Foundation.NSDictionary? {
    get
  }
  open var exports: Foundation.NSDictionary? {
    get
  }
  open var notification: Foundation.NSDictionary? {
    get
  }
  @objc open var outputsAndEvents: Foundation.NSArray? {
    get
  }
  open var users: Foundation.NSArray? {
    get
  }
  open var error: Foundation.NSError? {
    get
  }
  @objc open var responseItems: Foundation.NSArray? {
    get
  }
  open var headers: Swift.Dictionary<Swift.AnyHashable, Any>? {
    get
  }
  @objc open func endpoints() -> Foundation.NSArray?
  @objc open func alarms() -> Foundation.NSArray?
  @objc open func alarmDataSettings() -> Foundation.NSArray?
  @objc override dynamic public init()
  @objc override dynamic public init(objects: Swift.UnsafePointer<AnyObject>?, forKeys keys: Swift.UnsafePointer<Foundation.NSCopying>?, count cnt: Swift.Int)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum XPMobileSDKConnectError : Swift.Int {
  case serverIdMissmatch = -1
  case noPublicKey = -2
  case oemAccessDenied = -3
  case noValidConnectios = -7
  case insufficientUserRights = 25
  case eulaParameterNo = -999
  case incompatibleServerProductCode = -5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MIPSDKMobile.XPSDKConnection {
  @discardableResult
  @objc dynamic public func connect(lastConnectedServerUUID: Swift.String? = nil, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @discardableResult
  @objc dynamic public func disconnect() -> MIPSDKMobile.XPSDKRequest
  @discardableResult
  @objc dynamic public func disconnect(withSuccessHandler successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
}
@_inheritsConvenienceInitializers @objc open class XPSDKReconnectionErrorConstants : ObjectiveC.NSObject {
  @objc public static let XPSDKReconnectionErrorDomain: Swift.String
  @objc public static let XPSDKReconnectionErrorCode: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
extension MIPSDKMobile.XPSDKConnection {
  @discardableResult
  @objc dynamic public func login(withSuccessHandler successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest?
  @discardableResult
  @objc dynamic public func logInExternal(withIdpClientId idpClientId: Swift.String?, accessToken: Swift.String?, refreshToken: Swift.String?, idToken: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest?
}
public enum Level : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case severe
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class XPSDKRequest : ObjectiveC.NSObject, Foundation.URLSessionDelegate, Foundation.URLSessionTaskDelegate {
  open var commandName: Swift.String {
    get
  }
  @objc public func cancelSession()
  open func execute()
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class XPMobileSDK : ObjectiveC.NSObject {
  @objc public static var serverFeatures: Foundation.NSDictionary? {
    @objc get
  }
  @objc open class func sendCommand(name: Swift.String, parameters: [Swift.String : Swift.String]?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func connect(successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc @discardableResult
  open class func disconnect() -> MIPSDKMobile.XPSDKRequest
  @objc open class func disconnect(withSuccessHandler successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc open class func connectWithURLString(_ urlString: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func connectWithServerInfo(_ serverInfo: MIPSDKMobile.XPSDKServerInfo, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc @discardableResult
  open class func loginForUsername(_ username: Swift.String, password: Swift.String, loginType: Swift.String? = nil, shouldSave: Swift.Bool, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc open class func connectAndLoginForURLString(_ urlString: Swift.String, username: Swift.String, password: Swift.String, loginType: Swift.String? = nil, shouldSave: Swift.Bool, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func connectAndLoginForServerInfo(_ serverInfo: MIPSDKMobile.XPSDKServerInfo, username: Swift.String, password: Swift.String, loginType: Swift.String? = nil, shouldSave: Swift.Bool, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc @discardableResult
  open class func requestSecondStepAuthenticationPin(withSuccessHandler successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func verifySecondStepAuthenticationPin(withPin pin: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func requestStream(forCameraID cameraID: MIPSDKMobile.XPSDKViewID?, size: CoreFoundation.CGSize, method: MIPSDKMobile.XPSDKVideoConnectionMethod, signal: MIPSDKMobile.XPSDKVideoConnectionSignal, fps: Swift.Int, compressionLevel: Swift.Int, userInitiatedDownsampling: Swift.Bool, keyFramesOnly: Swift.Bool, resizeSupported: Swift.Bool, time: Foundation.NSDate?, upstreamImageQuality: Swift.Float, closeConnectionOnError: Swift.String?, successHandler: @escaping (MIPSDKMobile.XPSDKResponse, MIPSDKMobile.XPSDKVideoConnection) -> Swift.Void, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func requestStream(forCameraID cameraID: MIPSDKMobile.XPSDKViewID?, streamType: Swift.String?, size: CoreFoundation.CGSize, method: MIPSDKMobile.XPSDKVideoConnectionMethod, signal: MIPSDKMobile.XPSDKVideoConnectionSignal, fps: Swift.Int, compressionLevel: Swift.Int, userInitiatedDownsampling: Swift.Bool, keyFramesOnly: Swift.Bool, resizeSupported: Swift.Bool, time: Foundation.NSDate?, timeRangeBegin: Foundation.NSNumber? = nil, timeRangeEnd: Foundation.NSNumber? = nil, upstreamImageQuality: Swift.Float, closeConnectionOnError: Swift.String?, successHandler: @escaping (MIPSDKMobile.XPSDKResponse, MIPSDKMobile.XPSDKVideoConnection) -> Swift.Void, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func requestInvestigationStream(withCameraID cameraID: Swift.String, investigationID: Swift.String?, seekType: Swift.String, size: CoreFoundation.CGSize, method: MIPSDKMobile.XPSDKVideoConnectionMethod, keyFramesOnly: Swift.Bool, resizeSupported: Swift.Bool, startTime: Foundation.NSNumber?, fps: Swift.Int, userInitiatedDownsampling: Swift.Bool, compressionLevel: Swift.Int, successHandler: @escaping (MIPSDKMobile.XPSDKResponse, MIPSDKMobile.XPSDKVideoConnection) -> Swift.Void, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc open class func cancelRequestStream(request: MIPSDKMobile.XPSDKRequest)
  @objc open class func changeStream(forVideoID videoID: Swift.String, fps: Swift.Int, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func changeStream(forVideoID videoID: Swift.String, size: CoreFoundation.CGSize, sourceRect: CoreFoundation.CGRect, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func changeStream(forVideoID videoID: Swift.String, playSpeed: Swift.Float, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func changeStream(forVideoID videoID: Swift.String, size: CoreFoundation.CGSize, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func changeStream(forVideoID videoID: Swift.String, sourceRect: CoreFoundation.CGRect, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc @available(*, deprecated, message: "Use requestAudioStream(forMicrophoneId:playbackControllerId:investigationId:audioEncoding:signalType:methodType:successHandler:failureHandler:)")
  open class func requestAudioStream(forMicrophoneId micId: Swift.String, playbackControllerId: Swift.String?, audioEncoding: Swift.String, signalType: Swift.String, methodType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func requestAudioStream(forMicrophoneId micId: Swift.String, playbackControllerId: Swift.String?, investigationId: Swift.String?, audioEncoding: Swift.String, signalType: Swift.String, methodType: Swift.String, closeConnectionOnError: Swift.String? = nil, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func requestAudioStream(forItemIDs itemIds: Foundation.NSArray, playbackControllerId: Swift.String?, investigationId: Swift.String?, audioEncoding: Swift.String, signalType: Swift.String, methodType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func closeAudioStream(forAudioId audioId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func previousSequence(forVideoID videoID: Swift.String, speed: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func nextSequence(forVideoID videoID: Swift.String, speed: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func previousFrame(forVideoID videoID: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func nextFrame(forVideoID videoID: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func seekToTimestamp(forVideoID videoID: Swift.String, timestamp: Foundation.NSNumber, seekType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func seekToTime(forVideoID videoID: Swift.String, time: Foundation.NSDate, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func moveCamera(forVideoID videoID: Swift.String, ptzMotion: MIPSDKMobile.XPSDKPTZMotion, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func moveCamera(forVideoID videoID: Swift.String, ptzPreset: MIPSDKMobile.XPSDKCameraPTZPreset, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc @discardableResult
  open class func requestPTZPresets(forVideoId videoID: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func controlPTZ(forCameraID cameraID: Swift.String, gestureXPercent x: ObjectiveC.NSInteger, gestureYPercent y: ObjectiveC.NSInteger, gestureDuration duration: ObjectiveC.NSInteger, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func controlPTZ(forCameraID cameraID: Swift.String, gestureXPercent x: ObjectiveC.NSInteger, gestureYPercent y: ObjectiveC.NSInteger, gestureTimeout timeout: ObjectiveC.NSInteger, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func controlPTZ(forCameraID cameraID: Swift.String, PTZMotion ptzMotion: MIPSDKMobile.XPSDKPTZMotion, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc open class func closeVideoConnection(videoConnection: MIPSDKMobile.XPSDKVideoConnection, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc open class func requestAudioStreamIn(forItemId itemId: Swift.String, audioEncoding: Swift.String, samplingRate: Swift.String, bitsPerSample: Swift.String, numberOfChannels: Swift.String, closeConnectionOnError: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc open class func requestAudioPush(forItemId itemId: Swift.String, audioEncoding: Swift.String, samplingRate: Swift.String, bitsPerSample: Swift.String, numberOfChannels: Swift.String, closeConnectionOnError: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc open class func getAllViewsAndCameras(withSuccessHandler successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  @objc @discardableResult
  open class func getSubviewsOfView(withId viewId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getOutputsAndEvents(forCameraId cameraId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func requestActivate(forObjectId objectId: Swift.String, triggerType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAlarms(withCount count: Swift.Int, timestamp: Swift.String, op: Swift.String, myAlarms: Swift.Bool, excludedStates: Swift.String, excludedPriorities: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAlarm(withId alarmId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAlarmDataSettings(withSuccessHandler successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func acknowledgeAlarm(withId alarmId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func updateAlarm(withId alarmId: Swift.String, updatedParameters: [Swift.String : Swift.String], successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  open class func setupLogger(showInDebug: Swift.Bool, showInRelease: Swift.Bool, showDate: Swift.Bool, showLevel: Swift.Bool, showBundleName: Swift.Bool, showFileName: Swift.Bool, showLineNubmer: Swift.Bool, showFunctionName: Swift.Bool, showLevels: [MIPSDKMobile.Level]?)
  @objc @discardableResult
  open class func createInvestigation(withName name: Swift.String, cameraID: Swift.String, startTime: Foundation.Date, endTime: Foundation.Date, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getInvestigation(withId investigationId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func deleteInvestigation(withId investigationId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func deleteInvestigationExport(withId investigationId: Swift.String, exportType: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getSequences(withCameraId cameraID: Swift.String, seqType: Swift.String, time: Foundation.NSNumber, beforeTime: Foundation.NSNumber?, beforeCount: Foundation.NSNumber?, afterTime: Foundation.NSNumber?, afterCount: Foundation.NSNumber?, investigationId: Swift.String?, forceSequencesFromExport: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getDifferentSequences(withCameraId cameraID: Swift.String, seqType: Swift.String, itemKind: Swift.String?, time: Foundation.NSNumber, beforeTime: Foundation.NSNumber?, beforeCount: Foundation.NSNumber?, afterTime: Foundation.NSNumber?, afterCount: Foundation.NSNumber?, investigationId: Swift.String?, forceSequencesFromExport: Swift.String?, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAccessControlEvent(withId eventId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAllAccessControlDoors(successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAccessControlDoor(withId doorId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAccessControlDoorStates(withDoorId doorId: Swift.String, accessControlSystemId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAllAccessControlRequests(successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAccessControlEventCategories(successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getAccessControlEvents(withPageNumber pageNumber: Swift.UInt, eventsPerPage: Swift.UInt, excludedStates: Swift.String, endTime: Foundation.Date, includeEventsCount: Swift.Bool, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func executeAccessControlRuleCommand(withSystemId systemId: Swift.String, instanceId: Swift.String, commandTypeId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func executeAccessControlSystemCommand(withEventId eventId: Swift.String, sourceObjectId: Swift.String, sourceKindId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getCameraCapabilities(withId cameraId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func createBookmark(withId videoId: Swift.String, text: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func createBookmarkForVideo(withId videoId: Swift.String, cameraId: Swift.String, name: Swift.String, description: Swift.String? = nil, time: Foundation.NSNumber, startTime: Foundation.NSNumber? = nil, endTime: Foundation.NSNumber? = nil, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func updateBookmark(withId bookmarkId: Swift.String, name: Swift.String, description: Swift.String? = nil, time: Foundation.NSNumber? = nil, startTime: Foundation.NSNumber? = nil, endTime: Foundation.NSNumber? = nil, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func deleteBookmark(withId bookmarkId: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @discardableResult
  open class func bookmarks(withId bookmarkID: Swift.String? = nil, count: Swift.Int? = nil, searchCameraIds: Swift.String? = nil, searchString: Swift.String? = nil, startTime: Foundation.NSNumber? = nil, endTime: Foundation.NSNumber? = nil, myBookmarksOnly: Swift.Bool? = nil, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func requestDataForNewBookmark(withCameraId cameraID: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getThumbnail(forCameraId cameraId: Swift.String, investigationId: Swift.String?, seekType: Swift.String, size: CoreFoundation.CGSize, time: Foundation.NSNumber, timespan: Foundation.NSNumber, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc @discardableResult
  open class func getTileServers(successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  @objc open class func addDelegate(_ delegate: MIPSDKMobile.XPMobileSDKConnectionDelegate)
  @objc open class func removeDelegate(_ delegate: MIPSDKMobile.XPMobileSDKConnectionDelegate)
  @objc open class func stopAllSessions()
  @objc open class func stopRequestWithName(_ name: Swift.String) -> Swift.Bool
  @objc open class func sendLiveMessage()
  @objc open class func stopLiveMessage()
  @objc open class func startLiveMessage()
  @objc override dynamic public init()
  @objc deinit
}
extension MIPSDKMobile.XPSDKConnection {
  public func moveCamera(forVideoID videoID: Swift.String, ptzMotion: MIPSDKMobile.XPSDKPTZMotion, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func moveCamera(forVideoID videoID: Swift.String, ptzPreset: MIPSDKMobile.XPSDKCameraPTZPreset, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?)
  public func requestPTZPresets(forVideoId videoID: Swift.String, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  public func controlPTZ(forCameraID cameraID: Swift.String, gestureXPercent x: ObjectiveC.NSInteger, gestureYPercent y: ObjectiveC.NSInteger, gestureDuration duration: ObjectiveC.NSInteger, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  public func controlPTZ(forCameraID cameraID: Swift.String, gestureXPercent x: ObjectiveC.NSInteger, gestureYPercent y: ObjectiveC.NSInteger, gestureTimeout timeout: ObjectiveC.NSInteger, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
  public func controlPTZ(forCameraID cameraID: Swift.String, PTZMotion ptzMotion: MIPSDKMobile.XPSDKPTZMotion, successHandler: MIPSDKMobile.SuccessResponse?, failureHandler: MIPSDKMobile.FailureBlock?) -> MIPSDKMobile.XPSDKRequest
}
@_inheritsConvenienceInitializers @objc open class XPSDKConstants : ObjectiveC.NSObject {
  @objc public static let XPSDKPublicYes: Swift.String
  @objc public static let XPSDKPublicNo: Swift.String
  @objc public static let XPSDKPublicKey: Swift.String
  @objc public static let XPSDKDeviceId: Swift.String
  @objc public static let XPSDKKeyLength: Swift.String
  @objc public static let XPSDKConnectionId: Swift.String
  @objc public static let XPSDKChangePasswordRelativePath: Swift.String
  @objc public static let XPSDKServerId: Swift.String
  @objc public static let XPSDKTimeout: Swift.String
  @objc public static let XPSDKConnect: Swift.String
  @objc public static let XPSDKUsername: Swift.String
  @objc public static let XPSDKPassword: Swift.String
  @objc public static let XPSDKIdpClientId: Swift.String
  @objc public static let XPSDKAccessToken: Swift.String
  @objc public static let XPSDKRefreshToken: Swift.String
  @objc public static let XPSDKIdentityToken: Swift.String
  @objc public static let XPSDKLoginType: Swift.String
  @objc public static let XPSDKLoginTypеBasic: Swift.String
  @objc public static let XPSDKLoginTypеWindows: Swift.String
  @objc public static let XPSDKLoginTypеExternal: Swift.String
  @objc public static let XPSDKCollectUsageData: Swift.String
  @objc public static let XPSDKSecondStepAuthenticationPin: Swift.String
  @objc public static let XPSDKSupportsResampling: Swift.String
  @objc public static let XPSDKSupportsExtendedResamplingFactor: Swift.String
  @objc public static let XPSDKClientType: Swift.String
  @objc public static let XPSDKSupportsSmartMap: Swift.String
  @objc public static let XPSDKSupportsAudioIn: Swift.String
  @objc public static let XPSDKSupportsAudioOut: Swift.String
  @objc public static let XPSDKSupportsAdaptiveStreaming: Swift.String
  @objc public static let XPSDKMobileClient: Swift.String
  @objc public static let XPSDKLogin: Swift.String
  @objc public static let XPSDKLiveMessage: Swift.String
  @objc public static let XPSDKMilestoneXProtectServiceAlias: Swift.String
  @objc public static let XPSDKMilestoneXProtectEndPoint: Swift.String
  @objc public static let XPSDKRequestSecondStepAuthenticationPin: Swift.String
  @objc public static let XPSDKDisconnect: Swift.String
  @objc public static let XPSDKVerifySecondStepAuthenticationPin: Swift.String
  @objc public static let XPSDKGetAllViewsAndCameras: Swift.String
  @objc public static let XPSDKGetViews: Swift.String
  @objc public static let XPSDKGetViewsParamViewId: Swift.String
  @objc public static let XPSDKGetPermittedUsers: Swift.String
  @objc public static let XPSDKResponseErrorDomain: Swift.String
  @objc public static let XPSDKCommunication: Swift.String
  @objc public static let XPSDKCommand: Swift.String
  @objc public static let XPSDKEncryptedCommand: Swift.String
  @objc public static let XPSDKvalue: Swift.String
  @objc public static let XPSDKValue: Swift.String
  @objc public static let XPSDKName: Swift.String
  @objc public static let XPSDKType: Swift.String
  @objc public static let XPSDKResponseKey: Swift.String
  @objc public static let XPSDKProcessing: Swift.String
  @objc public static let XPSDKOutputParams: Swift.String
  @objc public static let XPSDKParam: Swift.String
  @objc public static let XPSDKSubItems: Swift.String
  @objc public static let XPSDKSequences: Swift.String
  @objc public static let XPSDKOEHeaderGroup: Swift.String
  @objc public static let XPSDKExports: Swift.String
  @objc public static let XPSDKItems: Swift.String
  @objc public static let XPSDKItem: Swift.String
  @objc public static let XPSDKAlarm: Swift.String
  @objc public static let XPSDKAlarmDataSetting: Swift.String
  @objc public static let XPSDKNotification: Swift.String
  @objc public static let XPSDKResult: Swift.String
  @objc public static let XPSDKOK: Swift.String
  @objc public static let XPSDKErrorString: Swift.String
  @objc public static let XPSDKErrorCode: Swift.String
  @objc public static let XPSDKId: Swift.String
  @objc public static let XPSDKRequestDefaultError: Swift.String
  @objc public static let XPSDKRequestXMLParse: Swift.String
  @objc public static let kNetworkReachabilityChangedNotification: Swift.String
  @objc public static let XPSDKGetOutputsAndEvents: Swift.String
  @objc public static let XPSDKGetOutputsParamCameraId: Swift.String
  @objc public static let XPSDKRequestActivation: Swift.String
  @objc public static let XPSDKRequestActivationParamObjectId: Swift.String
  @objc public static let XPSDKRequestActivationParamTriggerType: Swift.String
  @objc public static let XPSDKGetAlarms: Swift.String
  @objc public static let XPSDKGetAlarmsParamValueYes: Swift.String
  @objc public static let XPSDKGetAlarmsParamValueNo: Swift.String
  @objc public static let XPSDKGetAlarmsParamMyAlarms: Swift.String
  @objc public static let XPSDKGetAlarmsParamOperator: Swift.String
  @objc public static let XPSDKGetAlarmsParamTimestamp: Swift.String
  @objc public static let XPSDKGetAlarmsParamState: Swift.String
  @objc public static let XPSDKGetAlarmsParamPriority: Swift.String
  @objc public static let XPSDKGetAlarmsParamCount: Swift.String
  @objc public static let XPSDKGetAlarmDataSettings: Swift.String
  @objc public static let XPSDKGetAlarmsParamId: Swift.String
  @objc public static let XPSDKUpdateAlarm: Swift.String
  @objc public static let XPSDKUpdateAlarmParamAlarmId: Swift.String
  @objc public static let XPSDKAcknowledgeAlarm: Swift.String
  @objc public static let XPSDKAcknowledgeAlarmParamId: Swift.String
  @objc public static let XPSDKCreateInvestigation: Swift.String
  @objc public static let XPSDKCreateInvestigationParamName: Swift.String
  @objc public static let XPSDKCreateInvestigationParamCameraID: Swift.String
  @objc public static let XPSDKCreateInvestigationParamStartTime: Swift.String
  @objc public static let XPSDKCreateInvestigationParamEndTime: Swift.String
  @objc public static let XPSDKGetInvestigation: Swift.String
  @objc public static let XPSDKGetInvestigationParamId: Swift.String
  @objc public static let XPSDKDeleteInvestigation: Swift.String
  @objc public static let XPSDKDeleteInvestigationExport: Swift.String
  @objc public static let XPSDKDeleteInvestigationExportParamId: Swift.String
  @objc public static let XPSDKDeleteInvestigationExportParamExportType: Swift.String
  @objc public static let XPSDKGetTileServers: Swift.String
  @objc public static let XPSDKConnectionRequestNameRequestStream: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamCameraID: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamInvestigationID: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamDestWidth: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamDestHeight: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamFPS: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamCompressionLevel: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamKeyFramesOnly: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSignalType: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamMethodType: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamVideoID: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSrcWidth: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSrcHeight: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamAddress: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamPort: Swift.String
  @objc public static let XPSDKConnectionRequestStreamBookmark: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamTime: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamTimeRangeBegin: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamTimeRangeEnd: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamStreamType: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamStreamTypeFragmentedMP4: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamUserDownsampling: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamResizeAvailable: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamOriginalSize: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamCloseConnection: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsLive: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsPlayback: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsPTZ: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsPTZPresets: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsValueYes: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsValueNo: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsSequences: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsAviExports: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSupportsJpegExports: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamForcePlaybackFromExport: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSeekType: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamMethodPull: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamMethodPush: Swift.String
  @objc public static let XPSDKConnectionRequestNameCloseStream: Swift.String
  @objc public static let XPSDKConnectionCloseStreamParamVideoID: Swift.String
  @objc public static let XPSDKConnectionRequestNameChangeStream: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSrcLeft: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSrcRight: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSrcTop: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamSrcBottom: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamVideoID: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamSpeed: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamSeekTypePrevSeq: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamSeekTypeNextSeq: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamSeekTypePrevFrame: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamSeekTypeNextFrame: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamSeekType: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamTime: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamPtzMove: Swift.String
  @objc public static let XPSDKConnectionChangeStreamParamPtzPreset: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetPTZPresets: Swift.String
  @objc public static let XPSDKConnectionGetPTZPresetsParamVideoID: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetSequences: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamCameraId: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamTime: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamSeqType: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamBeforeTime: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamBeforeCount: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamAfterTime: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamAfterCount: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamInvestigationId: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamItemKind: Swift.String
  @objc public static let XPSDKConnectionGetSequencesParamForceSequencesFromExport: Swift.String
  @objc public static let XPSDKConnectionGetSequencesSequenceItem: Swift.String
  @objc public static let XPSDKConnectionGetSequencesSequenceStartTime: Swift.String
  @objc public static let XPSDKConnectionGetSequencesSequenceTimeStamp: Swift.String
  @objc public static let XPSDKConnectionGetSequencesSequenceEndTime: Swift.String
  @objc public static let XPSDKVideoPushLocation: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamItemID: Swift.String
  @objc public static let XPSDKConnectionRequestParamItemIds: Swift.String
  @objc public static let XPSDKConnectionRequestNameRequestAudioStream: Swift.String
  @objc public static let XPSDKConnectionRequestNameRequestAudioStreamIn: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamAudioEncoding: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamAudioBitsPerSample: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamAudioSamplingRate: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamAudioChannelsNumber: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamStreamHeaders: Swift.String
  @objc public static let XPSDKConnectionRequestStreamParamAudioCloseConnection: Swift.String
  @objc public static let XPSDKConnectionRequestAuidoStreamParamPlaybackControllerId: Swift.String
  @objc public static let XPSDKConnectionRequestAuidoStreamParamInvestigationId: Swift.String
  @objc public static let XPSDKConnectionRequestNameControlPTZ: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamType: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamTypeSwipe: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamTypeTapAndHold: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamTypeStep: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamCameraID: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamGestureXPercent: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamGestureYPercent: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamGestureDuration: Swift.String
  @objc public static let XPSDKConnectionRequestControlPTZParamGestureTimeout: Swift.String
  @objc public static let XPSDKConnectionRequestControlParamPtzMove: Swift.String
  @objc public static let XPSDKConnectionnRequestGetAccessControlEvents: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlEventsParamId: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlEventsParamPageSize: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlEventsParamPage: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlEventsParamEndTimestamp: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlEventsParamExcludedStates: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlEventsParamIncludeEventsCount: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetDoors: Swift.String
  @objc public static let XPSDKConnectionRequestGetDoorsParamId: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetAccessControlDoorStates: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlDoorStatesParamSystemId: Swift.String
  @objc public static let XPSDKConnectionRequestGetAccessControlDoorStatesParamDoorId: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetAccessRequests: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetEventCategories: Swift.String
  @objc public static let XPSDKConnectionRequestNameExecuteAccessControlCommand: Swift.String
  @objc public static let XPSDKConnectionRequestExecuteCommandParamSystemId: Swift.String
  @objc public static let XPSDKConnectionRequestExecuteCommandParamInstanceId: Swift.String
  @objc public static let XPSDKConnectionRequestExecuteCommandParamCommandTypeId: Swift.String
  @objc public static let XPSDKConnectionRequestExecuteCommandParamCommandEventId: Swift.String
  @objc public static let XPSDKConnectionRequestExecuteCommandParamCommandSourceObjectId: Swift.String
  @objc public static let XPSDKConnectionRequestExecuteCommandParamCommandSourceKindId: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetCapabilities: Swift.String
  @objc public static let XPSDKConnectionRequestGetCapabilitiesParamCameraId: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetBookmarks: Swift.String
  @objc public static let XPSDKConnectionRequestGetBookmarksParamBookmarkId: Swift.String
  @objc public static let XPSDKConnectionRequestGetBookmarksParamCount: Swift.String
  @objc public static let XPSDKConnectionRequestGetBookmarksParamStartTime: Swift.String
  @objc public static let XPSDKConnectionRequestGetBookmarksParamEndTime: Swift.String
  @objc public static let XPSDKConnectionRequestGetBookmarksParamMyBookmarks: Swift.String
  @objc public static let XPSDKConnectionRequestGetBookmarksParamKeyword: Swift.String
  @objc public static let XPSDKConnectionRequestGetBookmarksParamSearchCameraIds: Swift.String
  @objc public static let XPSDKConnectionRequestNameRequestBookmarkCreation: Swift.String
  @objc public static let XPSDKConnectionRequestBookmarkCreationParamBeforeTime: Swift.String
  @objc public static let XPSDKConnectionRequestBookmarkCreationParamAfterTime: Swift.String
  @objc public static let XPSDKConnectionRequestNameDeleteBookmark: Swift.String
  @objc public static let XPSDKConnectionRequestDeleteBookmarkParamBookmarkId: Swift.String
  @objc public static let XPSDKConnectionRequestNameUpdateBookmark: Swift.String
  @objc public static let XPSDKConnectionRequestUpdateBookmarkParamBookmarkId: Swift.String
  @objc public static let XPSDKConnectionRequestUpdateBookmarkParamStartTime: Swift.String
  @objc public static let XPSDKConnectionRequestUpdateBookmarkParamEndTime: Swift.String
  @objc public static let XPSDKConnectionRequestUpdateBookmarkParamTime: Swift.String
  @objc public static let XPSDKConnectionRequestUpdateBookmarkParamName: Swift.String
  @objc public static let XPSDKConnectionRequestUpdateBookmarkParamDescription: Swift.String
  @objc public static let XPSDKConnectionRequestNameCreateBookmark: Swift.String
  @objc public static let XPSDKConnectionRequestCreateBookmarkParamVideoId: Swift.String
  @objc public static let XPSDKConnectionRequestCreateBookmarkParamDescription: Swift.String
  @objc public static let XPSDKConnectionRequestCreateBookmarkParamCameraId: Swift.String
  @objc public static let XPSDKConnectionRequestCreateBookmarkParamName: Swift.String
  @objc public static let XPSDKConnectionRequestCreateBookmarkParamTime: Swift.String
  @objc public static let XPSDKConnectionRequestCreateBookmarkParamStartTime: Swift.String
  @objc public static let XPSDKConnectionRequestCreateBookmarkParamEndTime: Swift.String
  @objc public static let XPSDKConnectionRequestNameGetThumbnail: Swift.String
  @objc public static let XPSDKConnectionRequestGetThumbnailParamCameraId: Swift.String
  @objc public static let XPSDKConnectionRequestGetThumbnailParamSeekType: Swift.String
  @objc public static let XPSDKConnectionRequestGetThumbnailParamWidth: Swift.String
  @objc public static let XPSDKConnectionRequestGetThumbnailParamHeight: Swift.String
  @objc public static let XPSDKConnectionRequestGetThumbnailParamTime: Swift.String
  @objc public static let XPSDKConnectionRequestGetThumbnailParamTimespan: Swift.String
  @objc public static let XPSDKConnectionRequestGetThumbnailParamInvesrigationId: Swift.String
  @objc public static let XPSDKConnectionRequestNameRequestAudioPush: Swift.String
  @objc public static let ConnectionErrorXPDomain: Swift.String
  @objc public static let XPSDKConnectionRequestProductCodeResponseParam: Swift.String
  @objc public static let XPSDKConnectionRequestProductCodeVersion1: Swift.String
  @objc public static let XPSDKConnectionRequestProductCodeVersion2: Swift.String
  @objc public static let XPSDKConnectionRequestServerHeaderParam: Swift.String
  @objc public static let XPSDKConnectionRequestServerTypeArcus: Swift.String
  @objc public static let XPSDKConnectionRequestServerTypeHusky: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class XPSDKServerInfo : ObjectiveC.NSObject {
  @objc open var serverHost: Swift.String?
  @objc open var serverPort: Foundation.NSNumber
  @objc open var isSecureConnection: Swift.Bool
  @objc open var serviceAlias: Swift.String?
  @objc open var communicationPath: Swift.String?
  @objc open var serverUUID: Swift.String?
  @objc convenience public init(host: Swift.String, port: Foundation.NSNumber)
  @objc convenience public init(withUrlString urlString: Swift.String, uuid: Swift.String?, serviceAlias: Swift.String? = XPSDKConstants.XPSDKMilestoneXProtectServiceAlias)
  @objc public func communicationURL() -> Foundation.URL?
  @objc override dynamic public init()
  @objc deinit
}
extension MIPSDKMobile.XPSDKConnectionState : Swift.Equatable {}
extension MIPSDKMobile.XPSDKConnectionState : Swift.Hashable {}
extension MIPSDKMobile.XPSDKConnectionState : Swift.RawRepresentable {}
extension MIPSDKMobile.XPSDKPTZMotion : Swift.Equatable {}
extension MIPSDKMobile.XPSDKPTZMotion : Swift.Hashable {}
extension MIPSDKMobile.XPSDKPTZMotion : Swift.RawRepresentable {}
extension MIPSDKMobile.XPMobileSDKConnectError : Swift.Equatable {}
extension MIPSDKMobile.XPMobileSDKConnectError : Swift.Hashable {}
extension MIPSDKMobile.XPMobileSDKConnectError : Swift.RawRepresentable {}
extension MIPSDKMobile.Level : Swift.Equatable {}
extension MIPSDKMobile.Level : Swift.Hashable {}
extension MIPSDKMobile.Level : Swift.RawRepresentable {}
